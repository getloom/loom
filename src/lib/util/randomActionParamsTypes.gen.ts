import type {Gen} from '@feltjs/gro';
import {toRootPath} from '@feltjs/gro/dist/paths.js';

import {actionData} from '$lib/app/actionData';

const toParamsName = (name: string): string => name + 'Params';

// Outputs a file with event types that can be imported from anywhere with no runtime cost.
export const gen: Gen = async ({originId}) => {
	return `
// generated by ${toRootPath(originId)}

import type {RandomVocab, RandomVocabContext} from '$lib/util/randomVocab';
import type {${actionData.map((e) => toParamsName(e.name)).join(',')}} from '$lib/app/actionTypes';

export interface RandomEventParams {
	${actionData.reduce(
		(str, eventInfo) =>
			str +
			`${
				eventInfo.name
			}: (random: RandomVocabContext, randomVocab?: RandomVocab) => Promise<${toParamsName(
				eventInfo.name,
			)}>;`.trim(),
		'',
	)}
}

// generated by ${toRootPath(originId)}
`.trim();
};
