import type {Gen} from '@feltjs/gro';
import {toRootPath} from '@feltjs/gro/dist/paths.js';
import {toVocabSchemaResolver} from '@feltjs/gro/dist/utils/schema.js';

import {actionDatas} from '$lib/app/actionData';
import {
	jsonSchemaToTypescript,
	type JsonSchemaToTypeScriptOptions,
} from '$lib/util/jsonSchemaToTypescript';
import {schemas} from '$lib/app/schemas';
import {services} from '$lib/server/services';
import type {Service} from '$lib/server/service';

const toParamsName = (name: string): string => name + 'Params';
const toResponseName = (name: string): string => name + 'Response';
const toResponseResultName = (name: string): string => name + 'ResponseResult';

const opts: Partial<JsonSchemaToTypeScriptOptions> = {
	$refOptions: {
		resolve: {
			http: false, // disable web resolution
			vocab: toVocabSchemaResolver(schemas),
		},
	},
};

// Outputs a file with event types that can be imported from anywhere with no runtime cost.
export const gen: Gen = async ({originId}) => {
	return `
// generated by ${toRootPath(originId)}
  
import type {SvelteComponent} from 'svelte';

import type {ApiResult} from '$lib/server/api';
import type {Query} from '$lib/util/query';
import type {NonAuthenticatedService, NonAuthorizedService, AuthorizedService} from '$lib/server/service';
import type {Hub, HubId, HubSettings} from '$lib/vocab/hub/hub';
import type {PublicActor, ClientActor} from '$lib/vocab/actor/actor';
import type {Assignment, AssignmentId} from '$lib/vocab/assignment/assignment';
import type {Space, SpaceId} from '$lib/vocab/space/space';
import type {Entity, EntityId} from '$lib/vocab/entity/entity';
import type {EntityData, Directory} from '$lib/vocab/entity/entityData';
import type {Tie} from '$lib/vocab/tie/tie';
import type {Role, RoleId} from '$lib/vocab/role/role';
import type {Policy, PolicyId} from '$lib/vocab/policy/policy';
import type {MutationContext} from '$lib/ui/mutation';
import type {ClientSession, ClientAccountSession, AccountSettings, ClientAccount} from '$lib/vocab/account/account';
import type {HubTemplate} from '$lib/app/templates';

/* eslint-disable @typescript-eslint/array-type */

export type ServiceActionName = ${actionDatas.reduce(
		(str, actionData) =>
			str + (actionData.type === 'ServiceAction' ? `| '${actionData.name}'` : ''),
		'',
	)};

export type ClientActionName = ${actionDatas.reduce(
		(str, actionData) => str + (actionData.type === 'ClientAction' ? `| '${actionData.name}'` : ''),
		'',
	)};

export interface EventParamsByName {
	${actionDatas.reduce(
		(str, actionData) =>
			str +
			`
${actionData.name}: ${toParamsName(actionData.name)};
`.trim(),
		'',
	)}
}
export interface EventResponseByName {
	${actionDatas.reduce(
		(str, actionData) =>
			str +
			(actionData.type === 'ClientAction'
				? ''
				: `
${actionData.name}: ${toResponseName(actionData.name)};
`.trim()),
		'',
	)}
}

export interface ServiceByName {
	${Array.from(services.values()).reduce((str, service) => {
		const {name} = service.action;
		return (
			str +
			`${name}: ${toServiceAuthPrefix(service)}Service<${toParamsName(
				name,
			)}, ${toResponseResultName(name)}>;`.trim()
		);
	}, '')}
}

${await actionDatas.reduce(
	async (str, actionData) =>
		(await str) +
		`
${await jsonSchemaToTypescript(actionData.params, toParamsName(actionData.name), opts)}${
			'response' in actionData
				? await jsonSchemaToTypescript(actionData.response, toResponseName(actionData.name), opts)
				: ''
		}${
			// TODO hacky, the ApiResult type should be represented in the schema
			// but that requires generic type generation:
			// https://github.com/bcherny/json-schema-to-typescript/issues/59
			'response' in actionData
				? `	export type ${toResponseResultName(actionData.name)} = ApiResult<${toResponseName(
						actionData.name,
				  )}>;`
				: ''
		}
`,
	Promise.resolve(''),
)}

export interface Actions {
	${actionDatas.reduce(
		(str, actionData) =>
			str +
			`${actionData.name}: (${
				actionData.params?.type === 'null' ? '' : `params: ${toParamsName(actionData.name)}`
			}) => ${actionData.returns};`.trim(),
		'',
	)}
}

export interface Mutations {
  ${actionDatas.reduce(
		(str, actionData) =>
			str +
			`
      ${actionData.name}: (
        ctx: MutationContext<${toParamsName(actionData.name)}, ${
				actionData.type === 'ClientAction' ? 'void' : toResponseResultName(actionData.name)
			}>,
      ) => ${actionData.returns};
`.trim(),
		'',
	)}
}

// generated by ${toRootPath(originId)}
`.trim();
};

const toServiceAuthPrefix = (service: Service): string =>
	service.action.authenticate === false
		? 'NonAuthenticated'
		: service.action.authorize === false
		? 'NonAuthorized'
		: 'Authorized';
