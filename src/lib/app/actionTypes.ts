// generated by src/lib/app/actionTypes.gen.ts

import type {SvelteComponent} from 'svelte';

import type {ApiResult} from '$lib/server/api';
import type {Query} from '$lib/util/query';
import type {
	NonAuthenticatedService,
	NonAuthorizedService,
	AuthorizedService,
} from '$lib/server/service';
import type {Hub, HubId, HubSettings} from '$lib/vocab/hub/hub';
import type {ActorId, PublicActor, ClientActor} from '$lib/vocab/actor/actor';
import type {Assignment, AssignmentId} from '$lib/vocab/assignment/assignment';
import type {Space, SpaceId} from '$lib/vocab/space/space';
import type {Entity, EntityId} from '$lib/vocab/entity/entity';
import type {EntityData, Directory} from '$lib/vocab/entity/entityData';
import type {Tie} from '$lib/vocab/tie/tie';
import type {Role, RoleId} from '$lib/vocab/role/role';
import type {Policy, PolicyId} from '$lib/vocab/policy/policy';
import type {MutationContext} from '$lib/ui/mutation';
import type {
	ClientSession,
	ClientAccountSession,
	AccountSettings,
	ClientAccount,
} from '$lib/vocab/account/account';
import type {HubTemplate} from '$lib/app/templates';

/* eslint-disable @typescript-eslint/array-type */

export type ServiceActionName =
	| 'SignUp'
	| 'SignIn'
	| 'SignOut'
	| 'UpdateAccountSettings'
	| 'UpdateAccountPassword'
	| 'CreateHub'
	| 'ReadHub'
	| 'UpdateHubSettings'
	| 'DeleteHub'
	| 'InviteToHub'
	| 'LeaveHub'
	| 'KickFromHub'
	| 'CreateAccountActor'
	| 'DeleteActor'
	| 'CreateAssignment'
	| 'DeleteAssignment'
	| 'CreateSpace'
	| 'ReadSpaces'
	| 'UpdateSpace'
	| 'DeleteSpace'
	| 'CreateEntity'
	| 'UpdateEntities'
	| 'ReadEntities'
	| 'ReadEntitiesPaginated'
	| 'EraseEntities'
	| 'DeleteEntities'
	| 'ReadEntitiesById'
	| 'CreateRole'
	| 'ReadRoles'
	| 'UpdateRole'
	| 'DeleteRole'
	| 'CreatePolicy'
	| 'ReadPolicies'
	| 'UpdatePolicy'
	| 'DeletePolicy'
	| 'Ping'
	| 'Ephemera';

export type ClientActionName =
	| 'QueryEntities'
	| 'SetSession'
	| 'ToggleMainNav'
	| 'ToggleSecondaryNav'
	| 'SetMobile'
	| 'OpenDialog'
	| 'CloseDialog'
	| 'ViewSpace'
	| 'ClearFreshness';

export interface EventParamsByName {
	SignUp: SignUpParams;
	SignIn: SignInParams;
	SignOut: SignOutParams;
	UpdateAccountSettings: UpdateAccountSettingsParams;
	UpdateAccountPassword: UpdateAccountPasswordParams;
	CreateHub: CreateHubParams;
	ReadHub: ReadHubParams;
	UpdateHubSettings: UpdateHubSettingsParams;
	DeleteHub: DeleteHubParams;
	InviteToHub: InviteToHubParams;
	LeaveHub: LeaveHubParams;
	KickFromHub: KickFromHubParams;
	CreateAccountActor: CreateAccountActorParams;
	DeleteActor: DeleteActorParams;
	CreateAssignment: CreateAssignmentParams;
	DeleteAssignment: DeleteAssignmentParams;
	CreateSpace: CreateSpaceParams;
	ReadSpaces: ReadSpacesParams;
	UpdateSpace: UpdateSpaceParams;
	DeleteSpace: DeleteSpaceParams;
	CreateEntity: CreateEntityParams;
	UpdateEntities: UpdateEntitiesParams;
	ReadEntities: ReadEntitiesParams;
	ReadEntitiesPaginated: ReadEntitiesPaginatedParams;
	QueryEntities: QueryEntitiesParams;
	EraseEntities: EraseEntitiesParams;
	DeleteEntities: DeleteEntitiesParams;
	ReadEntitiesById: ReadEntitiesByIdParams;
	CreateRole: CreateRoleParams;
	ReadRoles: ReadRolesParams;
	UpdateRole: UpdateRoleParams;
	DeleteRole: DeleteRoleParams;
	CreatePolicy: CreatePolicyParams;
	ReadPolicies: ReadPoliciesParams;
	UpdatePolicy: UpdatePolicyParams;
	DeletePolicy: DeletePolicyParams;
	Ping: PingParams;
	Ephemera: EphemeraParams;
	SetSession: SetSessionParams;
	ToggleMainNav: ToggleMainNavParams;
	ToggleSecondaryNav: ToggleSecondaryNavParams;
	SetMobile: SetMobileParams;
	OpenDialog: OpenDialogParams;
	CloseDialog: CloseDialogParams;
	ViewSpace: ViewSpaceParams;
	ClearFreshness: ClearFreshnessParams;
}
export interface EventResponseByName {
	SignUp: SignUpResponse;
	SignIn: SignInResponse;
	SignOut: SignOutResponse;
	UpdateAccountSettings: UpdateAccountSettingsResponse;
	UpdateAccountPassword: UpdateAccountPasswordResponse;
	CreateHub: CreateHubResponse;
	ReadHub: ReadHubResponse;
	UpdateHubSettings: UpdateHubSettingsResponse;
	DeleteHub: DeleteHubResponse;
	InviteToHub: InviteToHubResponse;
	LeaveHub: LeaveHubResponse;
	KickFromHub: KickFromHubResponse;
	CreateAccountActor: CreateAccountActorResponse;
	DeleteActor: DeleteActorResponse;
	CreateAssignment: CreateAssignmentResponse;
	DeleteAssignment: DeleteAssignmentResponse;
	CreateSpace: CreateSpaceResponse;
	ReadSpaces: ReadSpacesResponse;
	UpdateSpace: UpdateSpaceResponse;
	DeleteSpace: DeleteSpaceResponse;
	CreateEntity: CreateEntityResponse;
	UpdateEntities: UpdateEntitiesResponse;
	ReadEntities: ReadEntitiesResponse;
	ReadEntitiesPaginated: ReadEntitiesPaginatedResponse;
	EraseEntities: EraseEntitiesResponse;
	DeleteEntities: DeleteEntitiesResponse;
	ReadEntitiesById: ReadEntitiesByIdResponse;
	CreateRole: CreateRoleResponse;
	ReadRoles: ReadRolesResponse;
	UpdateRole: UpdateRoleResponse;
	DeleteRole: DeleteRoleResponse;
	CreatePolicy: CreatePolicyResponse;
	ReadPolicies: ReadPoliciesResponse;
	UpdatePolicy: UpdatePolicyResponse;
	DeletePolicy: DeletePolicyResponse;
	Ping: PingResponse;
	Ephemera: EphemeraResponse;
}

export interface ServiceByName {
	Ping: NonAuthorizedService<PingParams, PingResponseResult>;
	Ephemera: AuthorizedService<EphemeraParams, EphemeraResponseResult>;
	SignUp: NonAuthenticatedService<SignUpParams, SignUpResponseResult>;
	SignIn: NonAuthenticatedService<SignInParams, SignInResponseResult>;
	SignOut: NonAuthorizedService<SignOutParams, SignOutResponseResult>;
	UpdateAccountSettings: NonAuthorizedService<
		UpdateAccountSettingsParams,
		UpdateAccountSettingsResponseResult
	>;
	UpdateAccountPassword: NonAuthorizedService<
		UpdateAccountPasswordParams,
		UpdateAccountPasswordResponseResult
	>;
	CreateAccountActor: NonAuthorizedService<
		CreateAccountActorParams,
		CreateAccountActorResponseResult
	>;
	DeleteActor: AuthorizedService<DeleteActorParams, DeleteActorResponseResult>;
	ReadHub: AuthorizedService<ReadHubParams, ReadHubResponseResult>;
	CreateHub: AuthorizedService<CreateHubParams, CreateHubResponseResult>;
	UpdateHubSettings: AuthorizedService<UpdateHubSettingsParams, UpdateHubSettingsResponseResult>;
	DeleteHub: AuthorizedService<DeleteHubParams, DeleteHubResponseResult>;
	InviteToHub: AuthorizedService<InviteToHubParams, InviteToHubResponseResult>;
	LeaveHub: AuthorizedService<LeaveHubParams, LeaveHubResponseResult>;
	KickFromHub: AuthorizedService<KickFromHubParams, KickFromHubResponseResult>;
	CreateAssignment: AuthorizedService<CreateAssignmentParams, CreateAssignmentResponseResult>;
	DeleteAssignment: AuthorizedService<DeleteAssignmentParams, DeleteAssignmentResponseResult>;
	ReadSpaces: AuthorizedService<ReadSpacesParams, ReadSpacesResponseResult>;
	CreateSpace: AuthorizedService<CreateSpaceParams, CreateSpaceResponseResult>;
	UpdateSpace: AuthorizedService<UpdateSpaceParams, UpdateSpaceResponseResult>;
	DeleteSpace: AuthorizedService<DeleteSpaceParams, DeleteSpaceResponseResult>;
	ReadEntities: AuthorizedService<ReadEntitiesParams, ReadEntitiesResponseResult>;
	ReadEntitiesPaginated: AuthorizedService<
		ReadEntitiesPaginatedParams,
		ReadEntitiesPaginatedResponseResult
	>;
	CreateEntity: AuthorizedService<CreateEntityParams, CreateEntityResponseResult>;
	UpdateEntities: AuthorizedService<UpdateEntitiesParams, UpdateEntitiesResponseResult>;
	EraseEntities: AuthorizedService<EraseEntitiesParams, EraseEntitiesResponseResult>;
	DeleteEntities: AuthorizedService<DeleteEntitiesParams, DeleteEntitiesResponseResult>;
	ReadEntitiesById: AuthorizedService<ReadEntitiesByIdParams, ReadEntitiesByIdResponseResult>;
	CreateRole: AuthorizedService<CreateRoleParams, CreateRoleResponseResult>;
	ReadRoles: AuthorizedService<ReadRolesParams, ReadRolesResponseResult>;
	UpdateRole: AuthorizedService<UpdateRoleParams, UpdateRoleResponseResult>;
	DeleteRole: AuthorizedService<DeleteRoleParams, DeleteRoleResponseResult>;
	CreatePolicy: AuthorizedService<CreatePolicyParams, CreatePolicyResponseResult>;
	DeletePolicy: AuthorizedService<DeletePolicyParams, DeletePolicyResponseResult>;
	ReadPolicies: AuthorizedService<ReadPoliciesParams, ReadPoliciesResponseResult>;
	UpdatePolicy: AuthorizedService<UpdatePolicyParams, UpdatePolicyResponseResult>;
}

export interface SignUpParams {
	username: string;
	password: string;
}
export interface SignUpResponse {
	/**
	 *
	 * 		The session data loaded on each page for authenticated users.
	 *
	 */
	session: ClientAccountSession;
}
export type SignUpResponseResult = ApiResult<SignUpResponse>;

export interface SignInParams {
	username: string;
	password: string;
}
export interface SignInResponse {
	/**
	 *
	 * 		The session data loaded on each page for authenticated users.
	 *
	 */
	session: ClientAccountSession;
}
export type SignInResponseResult = ApiResult<SignInResponse>;

export type SignOutParams = null;
export type SignOutResponse = null;
export type SignOutResponseResult = ApiResult<SignOutResponse>;

export interface UpdateAccountSettingsParams {
	/**
	 *
	 * 		A nested set of attributes on Account & ClientAccount. Holds all account level settings.
	 *
	 */
	settings: AccountSettings;
}
/**
 *
 * 		A client-facing subset of an Account. Excludes 'password' for security.
 *
 */
export type UpdateAccountSettingsResponse = ClientAccount;
export type UpdateAccountSettingsResponseResult = ApiResult<UpdateAccountSettingsResponse>;

export interface UpdateAccountPasswordParams {
	oldPassword: string;
	newPassword: string;
}
/**
 *
 * 		A client-facing subset of an Account. Excludes 'password' for security.
 *
 */
export type UpdateAccountPasswordResponse = ClientAccount;
export type UpdateAccountPasswordResponseResult = ApiResult<UpdateAccountPasswordResponse>;

export interface CreateHubParams {
	actor: ActorId;
	template: HubTemplate;
}
export interface CreateHubResponse {
	/**
	 *
	 * 		Hubs represent the membrane around the places Actors can interact with each other or with system level data.
	 * 		They have self contained governance and ownership of Spaces within them.
	 * 		By default they are hidden & undiscoverable and are only visible to a user once a Persona has been invited in.
	 *
	 */
	hub: Hub;
	roles: Role[];
	spaces: Space[];
	directories: Directory[];
	assignments: Assignment[];
	policies: Policy[];
	personas: PublicActor[];
}
export type CreateHubResponseResult = ApiResult<CreateHubResponse>;

export interface ReadHubParams {
	actor: ActorId;
	hub_id: HubId;
}
export interface ReadHubResponse {
	/**
	 *
	 * 		Hubs represent the membrane around the places Actors can interact with each other or with system level data.
	 * 		They have self contained governance and ownership of Spaces within them.
	 * 		By default they are hidden & undiscoverable and are only visible to a user once a Persona has been invited in.
	 *
	 */
	hub: Hub;
	spaces: Space[];
	directories: Directory[];
	roles: Role[];
	assignments: Assignment[];
	personas: PublicActor[];
}
export type ReadHubResponseResult = ApiResult<ReadHubResponse>;

export interface UpdateHubSettingsParams {
	actor: ActorId;
	hub_id: HubId;
	/**
	 *
	 * 		A nested set of attributes on Hub. Holds all hub level settings.
	 *
	 */
	settings: HubSettings;
}
export type UpdateHubSettingsResponse = null;
export type UpdateHubSettingsResponseResult = ApiResult<UpdateHubSettingsResponse>;

export interface DeleteHubParams {
	actor: ActorId;
	hub_id: HubId;
}
export type DeleteHubResponse = null;
export type DeleteHubResponseResult = ApiResult<DeleteHubResponse>;

export interface InviteToHubParams {
	actor: ActorId;
	hub_id: HubId;
	name: string;
}
export interface InviteToHubResponse {
	/**
	 *
	 * 		A subset of an Actor available to all clients in a hub.
	 *
	 */
	persona: PublicActor;
	/**
	 *
	 * 	 Describes the relationship between a Persona and Role within a given Hub.
	 * 	 A Persona must have at least 1 assignment to be in a Hub and see it in the nav.
	 * 	 When initially joining a Hub, Actors are given an Assignment to the default Role.
	 *
	 */
	assignment: Assignment;
}
export type InviteToHubResponseResult = ApiResult<InviteToHubResponse>;

export interface LeaveHubParams {
	actor: ActorId;
	actor_id: ActorId;
	hub_id: HubId;
}
export type LeaveHubResponse = null;
export type LeaveHubResponseResult = ApiResult<LeaveHubResponse>;

export interface KickFromHubParams {
	actor: ActorId;
	actor_id: ActorId;
	hub_id: HubId;
}
export type KickFromHubResponse = null;
export type KickFromHubResponseResult = ApiResult<KickFromHubResponse>;

export interface CreateAccountActorParams {
	name: string;
}
export interface CreateAccountActorResponse {
	personas: ClientActor[];
	hubs: Hub[];
	roles: Role[];
	policies: Policy[];
	spaces: Space[];
	directories: Directory[];
	assignments: Assignment[];
}
export type CreateAccountActorResponseResult = ApiResult<CreateAccountActorResponse>;

export interface DeleteActorParams {
	actor: ActorId;
	actor_id: ActorId;
}
export type DeleteActorResponse = null;
export type DeleteActorResponseResult = ApiResult<DeleteActorResponse>;

export interface CreateAssignmentParams {
	actor: ActorId;
	actor_id: ActorId;
	hub_id: HubId;
	role_id: RoleId;
}
export interface CreateAssignmentResponse {
	/**
	 *
	 * 	 Describes the relationship between a Persona and Role within a given Hub.
	 * 	 A Persona must have at least 1 assignment to be in a Hub and see it in the nav.
	 * 	 When initially joining a Hub, Actors are given an Assignment to the default Role.
	 *
	 */
	assignment: Assignment;
}
export type CreateAssignmentResponseResult = ApiResult<CreateAssignmentResponse>;

export interface DeleteAssignmentParams {
	actor: ActorId;
	assignment_id: AssignmentId;
}
export type DeleteAssignmentResponse = null;
export type DeleteAssignmentResponseResult = ApiResult<DeleteAssignmentResponse>;

export interface CreateSpaceParams {
	actor: ActorId;
	hub_id: HubId;
	name: string;
	path: string;
	icon: string;
	view: string;
}
export interface CreateSpaceResponse {
	/**
	 *
	 * 	 Spaces are subdivisions within a Hub that hold a View and reference to an Entity directory.
	 * 	 The View is used to interpret, visualize, and manipulate the Entities connected to the directory.
	 * 	 Each is a Svelte component that conforms to the View interface.
	 *
	 */
	space: Space;
	/**
	 *
	 * 		An Entity is the core data type that represents an ActivityStreams object in the system.
	 * 		Each has an "owning" space & persona that controls its governance.
	 * 		Entities exist within a graph architecture, with Ties serving as the paths between nodes.
	 * 		Conventionally, all entities within a given Space can be found by traversing
	 * 		the graph starting at the directory Entity associated with the owning Space.
	 * 		A directory is an ActivityStreams Collection referenced by each Space.
	 *
	 */
	directory: Directory;
}
export type CreateSpaceResponseResult = ApiResult<CreateSpaceResponse>;

export interface ReadSpacesParams {
	actor: ActorId;
	hub_id: HubId;
}
export interface ReadSpacesResponse {
	spaces: Space[];
	directories: Directory[];
}
export type ReadSpacesResponseResult = ApiResult<ReadSpacesResponse>;

export interface UpdateSpaceParams {
	actor: ActorId;
	space_id: SpaceId;
	name?: string;
	path?: string;
	icon?: string;
	view?: string;
}
export interface UpdateSpaceResponse {
	/**
	 *
	 * 	 Spaces are subdivisions within a Hub that hold a View and reference to an Entity directory.
	 * 	 The View is used to interpret, visualize, and manipulate the Entities connected to the directory.
	 * 	 Each is a Svelte component that conforms to the View interface.
	 *
	 */
	space: Space;
}
export type UpdateSpaceResponseResult = ApiResult<UpdateSpaceResponse>;

export interface DeleteSpaceParams {
	actor: ActorId;
	space_id: SpaceId;
}
export type DeleteSpaceResponse = null;
export type DeleteSpaceResponseResult = ApiResult<DeleteSpaceResponse>;

export interface CreateEntityParams {
	actor: ActorId;
	space_id: SpaceId;
	path?: string | null;
	data: EntityData;
	ties?: (
		| {
				source_id: EntityId;
				type?: string;
		  }
		| {
				dest_id: EntityId;
				type?: string;
		  }
	)[];
}
export interface CreateEntityResponse {
	entities: Entity[];
	ties: Tie[];
}
export type CreateEntityResponseResult = ApiResult<CreateEntityResponse>;

export interface UpdateEntitiesParams {
	actor: ActorId;
	entities: {
		entity_id: EntityId;
		data?: EntityData;
		path?: string | null;
	}[];
}
export interface UpdateEntitiesResponse {
	entities: Entity[];
}
export type UpdateEntitiesResponseResult = ApiResult<UpdateEntitiesResponse>;

export interface ReadEntitiesParams {
	actor: ActorId;
	source_id: EntityId;
}
export interface ReadEntitiesResponse {
	entities: Entity[];
	ties: Tie[];
}
export type ReadEntitiesResponseResult = ApiResult<ReadEntitiesResponse>;

export interface ReadEntitiesPaginatedParams {
	actor: ActorId;
	source_id: EntityId;
	pageSize?: number;
	pageKey?: number;
	related?: 'source' | 'dest' | 'both';
}
export interface ReadEntitiesPaginatedResponse {
	entities: Entity[];
	ties: Tie[];
}
export type ReadEntitiesPaginatedResponseResult = ApiResult<ReadEntitiesPaginatedResponse>;

export interface QueryEntitiesParams {
	actor: ActorId;
	source_id: EntityId;
}

export interface EraseEntitiesParams {
	actor: ActorId;
	entityIds: EntityId[];
}
export interface EraseEntitiesResponse {
	entities: Entity[];
}
export type EraseEntitiesResponseResult = ApiResult<EraseEntitiesResponse>;

export interface DeleteEntitiesParams {
	actor: ActorId;
	entityIds: EntityId[];
}
export interface DeleteEntitiesResponse {
	entities: Entity[];
	deleted: EntityId[];
}
export type DeleteEntitiesResponseResult = ApiResult<DeleteEntitiesResponse>;

export interface ReadEntitiesByIdParams {
	actor: ActorId;
	entityIds: number[];
}
export interface ReadEntitiesByIdResponse {
	entities: Entity[];
}
export type ReadEntitiesByIdResponseResult = ApiResult<ReadEntitiesByIdResponse>;

export interface CreateRoleParams {
	actor: ActorId;
	hub_id: HubId;
	name: string;
}
export interface CreateRoleResponse {
	/**
	 *
	 * 		Roles are user-defined governance objects that exist within the context of a single Hub.
	 * 		They have Policies associated with them that allow for actions to be taken within the system.
	 * 		When a Persona has a Role via an Assignment, that actor may take any action allowed by the Role's Policies.
	 *
	 */
	role: Role;
}
export type CreateRoleResponseResult = ApiResult<CreateRoleResponse>;

export interface ReadRolesParams {
	actor: ActorId;
	hub_id: HubId;
}
export interface ReadRolesResponse {
	roles: Role[];
}
export type ReadRolesResponseResult = ApiResult<ReadRolesResponse>;

export interface UpdateRoleParams {
	actor: ActorId;
	role_id: RoleId;
	name: string;
}
export interface UpdateRoleResponse {
	/**
	 *
	 * 		Roles are user-defined governance objects that exist within the context of a single Hub.
	 * 		They have Policies associated with them that allow for actions to be taken within the system.
	 * 		When a Persona has a Role via an Assignment, that actor may take any action allowed by the Role's Policies.
	 *
	 */
	role: Role;
}
export type UpdateRoleResponseResult = ApiResult<UpdateRoleResponse>;

export interface DeleteRoleParams {
	actor: ActorId;
	role_id: RoleId;
}
export type DeleteRoleResponse = null;
export type DeleteRoleResponseResult = ApiResult<DeleteRoleResponse>;

export interface CreatePolicyParams {
	actor: ActorId;
	role_id: RoleId;
	permission: string;
}
export interface CreatePolicyResponse {
	/**
	 *
	 * 		Policies are associated with Roles to describe the actions a Role is able to take with the system.
	 * 		Permissions are the enumeration of the those actions, often 1:1 with system Events.
	 * 		Data is a currently-unused attribute earmarked for allowing for more complicated governance schemes.
	 *
	 */
	policy: Policy;
}
export type CreatePolicyResponseResult = ApiResult<CreatePolicyResponse>;

export interface ReadPoliciesParams {
	actor: ActorId;
	role_id: RoleId;
}
export interface ReadPoliciesResponse {
	policies: Policy[];
}
export type ReadPoliciesResponseResult = ApiResult<ReadPoliciesResponse>;

export interface UpdatePolicyParams {
	actor: ActorId;
	policy_id: PolicyId;
	data: {
		[k: string]: unknown;
	} | null;
}
export interface UpdatePolicyResponse {
	/**
	 *
	 * 		Policies are associated with Roles to describe the actions a Role is able to take with the system.
	 * 		Permissions are the enumeration of the those actions, often 1:1 with system Events.
	 * 		Data is a currently-unused attribute earmarked for allowing for more complicated governance schemes.
	 *
	 */
	policy: Policy;
}
export type UpdatePolicyResponseResult = ApiResult<UpdatePolicyResponse>;

export interface DeletePolicyParams {
	actor: ActorId;
	policy_id: PolicyId;
}
export type DeletePolicyResponse = null;
export type DeletePolicyResponseResult = ApiResult<DeletePolicyResponse>;

export type PingParams = null;
export type PingResponse = null;
export type PingResponseResult = ApiResult<PingResponse>;

export interface EphemeraParams {
	actor: ActorId;
	space_id: SpaceId;
	data: {
		type: string;
		[k: string]: unknown;
	};
}
export interface EphemeraResponse {
	actor: ActorId;
	space_id: SpaceId;
	data: {
		type: string;
		[k: string]: unknown;
	};
}
export type EphemeraResponseResult = ApiResult<EphemeraResponse>;

export interface SetSessionParams {
	/**
	 *
	 * 		The session data loaded on each page for authenticated and unauthenticated users.
	 *
	 */
	session: ClientSession;
}

export type ToggleMainNavParams = void;

export type ToggleSecondaryNavParams = void;

export type SetMobileParams = boolean;

export interface OpenDialogParams {
	Component: typeof SvelteComponent;
	props?: {
		[k: string]: unknown;
	};
	dialogProps?: {
		[k: string]: unknown;
	};
}

export type CloseDialogParams = void;

export interface ViewSpaceParams {
	space_id: SpaceId;
	view: string | null;
}

export interface ClearFreshnessParams {
	directory_id: EntityId;
}

export interface Actions {
	SignUp: (params: SignUpParams) => Promise<SignUpResponseResult>;
	SignIn: (params: SignInParams) => Promise<SignInResponseResult>;
	SignOut: () => Promise<SignOutResponseResult>;
	UpdateAccountSettings: (
		params: UpdateAccountSettingsParams,
	) => Promise<UpdateAccountSettingsResponseResult>;
	UpdateAccountPassword: (
		params: UpdateAccountPasswordParams,
	) => Promise<UpdateAccountPasswordResponseResult>;
	CreateHub: (params: CreateHubParams) => Promise<CreateHubResponseResult>;
	ReadHub: (params: ReadHubParams) => Promise<ReadHubResponseResult>;
	UpdateHubSettings: (params: UpdateHubSettingsParams) => Promise<UpdateHubSettingsResponseResult>;
	DeleteHub: (params: DeleteHubParams) => Promise<DeleteHubResponseResult>;
	InviteToHub: (params: InviteToHubParams) => Promise<InviteToHubResponseResult>;
	LeaveHub: (params: LeaveHubParams) => Promise<LeaveHubResponseResult>;
	KickFromHub: (params: KickFromHubParams) => Promise<KickFromHubResponseResult>;
	CreateAccountActor: (
		params: CreateAccountActorParams,
	) => Promise<CreateAccountActorResponseResult>;
	DeleteActor: (params: DeleteActorParams) => Promise<DeleteActorResponseResult>;
	CreateAssignment: (params: CreateAssignmentParams) => Promise<CreateAssignmentResponseResult>;
	DeleteAssignment: (params: DeleteAssignmentParams) => Promise<DeleteAssignmentResponseResult>;
	CreateSpace: (params: CreateSpaceParams) => Promise<CreateSpaceResponseResult>;
	ReadSpaces: (params: ReadSpacesParams) => Promise<ReadSpacesResponseResult>;
	UpdateSpace: (params: UpdateSpaceParams) => Promise<UpdateSpaceResponseResult>;
	DeleteSpace: (params: DeleteSpaceParams) => Promise<DeleteSpaceResponseResult>;
	CreateEntity: (params: CreateEntityParams) => Promise<CreateEntityResponseResult>;
	UpdateEntities: (params: UpdateEntitiesParams) => Promise<UpdateEntitiesResponseResult>;
	ReadEntities: (params: ReadEntitiesParams) => Promise<ReadEntitiesResponseResult>;
	ReadEntitiesPaginated: (
		params: ReadEntitiesPaginatedParams,
	) => Promise<ReadEntitiesPaginatedResponseResult>;
	QueryEntities: (params: QueryEntitiesParams) => Query;
	EraseEntities: (params: EraseEntitiesParams) => Promise<EraseEntitiesResponseResult>;
	DeleteEntities: (params: DeleteEntitiesParams) => Promise<DeleteEntitiesResponseResult>;
	ReadEntitiesById: (params: ReadEntitiesByIdParams) => Promise<ReadEntitiesByIdResponseResult>;
	CreateRole: (params: CreateRoleParams) => Promise<CreateRoleResponseResult>;
	ReadRoles: (params: ReadRolesParams) => Promise<ReadRolesResponseResult>;
	UpdateRole: (params: UpdateRoleParams) => Promise<UpdateRoleResponseResult>;
	DeleteRole: (params: DeleteRoleParams) => Promise<DeleteRoleResponseResult>;
	CreatePolicy: (params: CreatePolicyParams) => Promise<CreatePolicyResponseResult>;
	ReadPolicies: (params: ReadPoliciesParams) => Promise<ReadPoliciesResponseResult>;
	UpdatePolicy: (params: UpdatePolicyParams) => Promise<UpdatePolicyResponseResult>;
	DeletePolicy: (params: DeletePolicyParams) => Promise<DeletePolicyResponseResult>;
	Ping: () => Promise<ApiResult<null>>;
	Ephemera: (params: EphemeraParams) => Promise<EphemeraResponseResult>;
	SetSession: (params: SetSessionParams) => void;
	ToggleMainNav: (params: ToggleMainNavParams) => void;
	ToggleSecondaryNav: (params: ToggleSecondaryNavParams) => void;
	SetMobile: (params: SetMobileParams) => void;
	OpenDialog: (params: OpenDialogParams) => void;
	CloseDialog: (params: CloseDialogParams) => void;
	ViewSpace: (params: ViewSpaceParams) => void;
	ClearFreshness: (params: ClearFreshnessParams) => void;
}

export interface Mutations {
	SignUp: (
		ctx: MutationContext<SignUpParams, SignUpResponseResult>,
	) => Promise<SignUpResponseResult>;
	SignIn: (
		ctx: MutationContext<SignInParams, SignInResponseResult>,
	) => Promise<SignInResponseResult>;
	SignOut: (
		ctx: MutationContext<SignOutParams, SignOutResponseResult>,
	) => Promise<SignOutResponseResult>;
	UpdateAccountSettings: (
		ctx: MutationContext<UpdateAccountSettingsParams, UpdateAccountSettingsResponseResult>,
	) => Promise<UpdateAccountSettingsResponseResult>;
	UpdateAccountPassword: (
		ctx: MutationContext<UpdateAccountPasswordParams, UpdateAccountPasswordResponseResult>,
	) => Promise<UpdateAccountPasswordResponseResult>;
	CreateHub: (
		ctx: MutationContext<CreateHubParams, CreateHubResponseResult>,
	) => Promise<CreateHubResponseResult>;
	ReadHub: (
		ctx: MutationContext<ReadHubParams, ReadHubResponseResult>,
	) => Promise<ReadHubResponseResult>;
	UpdateHubSettings: (
		ctx: MutationContext<UpdateHubSettingsParams, UpdateHubSettingsResponseResult>,
	) => Promise<UpdateHubSettingsResponseResult>;
	DeleteHub: (
		ctx: MutationContext<DeleteHubParams, DeleteHubResponseResult>,
	) => Promise<DeleteHubResponseResult>;
	InviteToHub: (
		ctx: MutationContext<InviteToHubParams, InviteToHubResponseResult>,
	) => Promise<InviteToHubResponseResult>;
	LeaveHub: (
		ctx: MutationContext<LeaveHubParams, LeaveHubResponseResult>,
	) => Promise<LeaveHubResponseResult>;
	KickFromHub: (
		ctx: MutationContext<KickFromHubParams, KickFromHubResponseResult>,
	) => Promise<KickFromHubResponseResult>;
	CreateAccountActor: (
		ctx: MutationContext<CreateAccountActorParams, CreateAccountActorResponseResult>,
	) => Promise<CreateAccountActorResponseResult>;
	DeleteActor: (
		ctx: MutationContext<DeleteActorParams, DeleteActorResponseResult>,
	) => Promise<DeleteActorResponseResult>;
	CreateAssignment: (
		ctx: MutationContext<CreateAssignmentParams, CreateAssignmentResponseResult>,
	) => Promise<CreateAssignmentResponseResult>;
	DeleteAssignment: (
		ctx: MutationContext<DeleteAssignmentParams, DeleteAssignmentResponseResult>,
	) => Promise<DeleteAssignmentResponseResult>;
	CreateSpace: (
		ctx: MutationContext<CreateSpaceParams, CreateSpaceResponseResult>,
	) => Promise<CreateSpaceResponseResult>;
	ReadSpaces: (
		ctx: MutationContext<ReadSpacesParams, ReadSpacesResponseResult>,
	) => Promise<ReadSpacesResponseResult>;
	UpdateSpace: (
		ctx: MutationContext<UpdateSpaceParams, UpdateSpaceResponseResult>,
	) => Promise<UpdateSpaceResponseResult>;
	DeleteSpace: (
		ctx: MutationContext<DeleteSpaceParams, DeleteSpaceResponseResult>,
	) => Promise<DeleteSpaceResponseResult>;
	CreateEntity: (
		ctx: MutationContext<CreateEntityParams, CreateEntityResponseResult>,
	) => Promise<CreateEntityResponseResult>;
	UpdateEntities: (
		ctx: MutationContext<UpdateEntitiesParams, UpdateEntitiesResponseResult>,
	) => Promise<UpdateEntitiesResponseResult>;
	ReadEntities: (
		ctx: MutationContext<ReadEntitiesParams, ReadEntitiesResponseResult>,
	) => Promise<ReadEntitiesResponseResult>;
	ReadEntitiesPaginated: (
		ctx: MutationContext<ReadEntitiesPaginatedParams, ReadEntitiesPaginatedResponseResult>,
	) => Promise<ReadEntitiesPaginatedResponseResult>;
	QueryEntities: (ctx: MutationContext<QueryEntitiesParams, void>) => Query;
	EraseEntities: (
		ctx: MutationContext<EraseEntitiesParams, EraseEntitiesResponseResult>,
	) => Promise<EraseEntitiesResponseResult>;
	DeleteEntities: (
		ctx: MutationContext<DeleteEntitiesParams, DeleteEntitiesResponseResult>,
	) => Promise<DeleteEntitiesResponseResult>;
	ReadEntitiesById: (
		ctx: MutationContext<ReadEntitiesByIdParams, ReadEntitiesByIdResponseResult>,
	) => Promise<ReadEntitiesByIdResponseResult>;
	CreateRole: (
		ctx: MutationContext<CreateRoleParams, CreateRoleResponseResult>,
	) => Promise<CreateRoleResponseResult>;
	ReadRoles: (
		ctx: MutationContext<ReadRolesParams, ReadRolesResponseResult>,
	) => Promise<ReadRolesResponseResult>;
	UpdateRole: (
		ctx: MutationContext<UpdateRoleParams, UpdateRoleResponseResult>,
	) => Promise<UpdateRoleResponseResult>;
	DeleteRole: (
		ctx: MutationContext<DeleteRoleParams, DeleteRoleResponseResult>,
	) => Promise<DeleteRoleResponseResult>;
	CreatePolicy: (
		ctx: MutationContext<CreatePolicyParams, CreatePolicyResponseResult>,
	) => Promise<CreatePolicyResponseResult>;
	ReadPolicies: (
		ctx: MutationContext<ReadPoliciesParams, ReadPoliciesResponseResult>,
	) => Promise<ReadPoliciesResponseResult>;
	UpdatePolicy: (
		ctx: MutationContext<UpdatePolicyParams, UpdatePolicyResponseResult>,
	) => Promise<UpdatePolicyResponseResult>;
	DeletePolicy: (
		ctx: MutationContext<DeletePolicyParams, DeletePolicyResponseResult>,
	) => Promise<DeletePolicyResponseResult>;
	Ping: (ctx: MutationContext<PingParams, PingResponseResult>) => Promise<ApiResult<null>>;
	Ephemera: (
		ctx: MutationContext<EphemeraParams, EphemeraResponseResult>,
	) => Promise<EphemeraResponseResult>;
	SetSession: (ctx: MutationContext<SetSessionParams, void>) => void;
	ToggleMainNav: (ctx: MutationContext<ToggleMainNavParams, void>) => void;
	ToggleSecondaryNav: (ctx: MutationContext<ToggleSecondaryNavParams, void>) => void;
	SetMobile: (ctx: MutationContext<SetMobileParams, void>) => void;
	OpenDialog: (ctx: MutationContext<OpenDialogParams, void>) => void;
	CloseDialog: (ctx: MutationContext<CloseDialogParams, void>) => void;
	ViewSpace: (ctx: MutationContext<ViewSpaceParams, void>) => void;
	ClearFreshness: (ctx: MutationContext<ClearFreshnessParams, void>) => void;
}

// generated by src/lib/app/actionTypes.gen.ts
